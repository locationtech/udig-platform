Printing Architecture
#####################

uDig : Printing Architecture

This page last changed on Jul 14, 2012 by jgarnett.

`Home <Home.html>`__

`Research <Research.html>`__

`Requirements <Requirements.html>`__

**`Architecture <Architecture.html>`__**

`Design <Design.html>`__

Modules

`Reference <Reference.html>`__

Team

`GeoConnections Project Schedule <GeoConnections%20Project%20Schedule.html>`__

The perspective of printing is all about data flow. Things that were easy for rendering (like WMS
requests) become difficult as we lose the safety of a target raster.

Use Cases
~~~~~~~~~

-  User hits "print"

   #. User selects Print
   #. User selects Printer and PageLayout
   #. System obtains a PrintContext - a modified version of Context that is optimized for the
      printing side
   #. System obtains a
      `net.refractions.udig.printing.template <net.refractions.udig.printing.template.html>`__
   #. Calls the `net.refractions.udig.printing <net.refractions.udig.printing.html>`__
   #. `net.refractions.udig.printing <net.refractions.udig.printing.html>`__ obtains a Graphics2D
      object from
   #. `net.refractions.udig.printing <net.refractions.udig.printing.html>`__ passes the Graphics2D
      object to rending system
   #. Rendering system returns a finished Graphics2D object
   #. Paper comes out of printer

-  User defines a layout with things like legend, north arrow, title and scale
-  User prints to PDF
-  User selects information to be highlighted in their report
-  User prints a map book based on a single layout multiple bbox
-  User saves their context+layout to disk for later reuse
-  User loads a context+layout

Modules
~~~~~~~

-  `net.refractions.udig.project.context <net.refractions.udig.project.context.html>`__
-  `net.refractions.udig.printing.context <net.refractions.udig.printing.context.html>`__
-  `net.refractions.udig.render.features <net.refractions.udig.render.features.html>`__
-  `net.refractions.udig.catalog.grid <net.refractions.udig.catalog.grid.html>`__
-  `net.refractions.udig.render.decorator <net.refractions.udig.render.decorator.html>`__ - north
   arrow, scale, legend, title
-  `net.refractions.udig.printing.wizard <net.refractions.udig.printing.wizard.html>`__ - walks
   through the process of setting up a Page
-  `net.refractions.udig.printing.page <net.refractions.udig.printing.page.html>`__ - persistence
   (saves context, decorators & printing selection?)
-  `net.refractions.udig.printing.template <net.refractions.udig.printing.template.html>`__ -
   maintains the look of a Page
-  `net.refractions.udig.printing <net.refractions.udig.printing.html>`__ - Prints a Page

Diagram
~~~~~~~

|image0|

Design Notes
~~~~~~~~~~~~

The printing pipeline is similar in execution to the rendering pipeline. Several key differences
have appeared:

-  additional decorators such as a scalebar, compass, and legend
-  need to completely render presents a different spin than the "continual update" required for
   screen
-  connect renderer directly with a Graphics2D object provided by a Printer/PDF

General idea is to call each renderer:

-  in reverse order
-  for selection in reverse order
-  for each decoration (legend, title, etc...)

We may have issues with "draw through" that we do not on screen, and PDF file size (depending on the
amount of linework saved).

Context will be extended with additional "layers" for page decorators

| 

Attachments:

| |image1| `PrinterInteraction.png <download/attachments/135/PrinterInteraction.png>`__ (image/png)

+------------+----------------------------------------------------------+
| |image3|   | Document generated by Confluence on Aug 11, 2014 12:31   |
+------------+----------------------------------------------------------+

.. |image0| image:: /images/printing_architecture/PrinterInteraction.png
.. |image1| image:: images/icons/bullet_blue.gif
.. |image2| image:: images/border/spacer.gif
.. |image3| image:: images/border/spacer.gif
